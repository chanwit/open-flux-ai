{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>create Flux's helm release to install Nginx in the default namespace, with retry -1\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"nginx-release\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"nginx-release\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>generate helmrelease to install kafka in messaging namespace, include external access.\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"kafka\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"kafka\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>create helmrelease for installing Elasticsearch version 7.10 in logs namespace with node count 3.\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"elasticsearch-7.10\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"elasticsearch-7.10\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>generate helm release to deploy Redis cluster in data-store namespace with persistence enabled.\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"redis-cluster\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"redis-cluster\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>generate helm release to install Nginx Ingress in dev-team namespace.\n",
  "chosen": "<|from|> assistant\n<|recipient|>get_template\n<|content|> {\"kind\": \"helmrelease\", \"name\": \"nginx-ingress\"}<|stop|>\n",
  "rejected": "<|from|> assistant\n<|recipient|>get_template\n<|content|> {\"kind\": \"helmrelease\", \"name\": \"nginx-ingress\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>create helmrelease for installing elastic search version 7.15 in logs namespace with node count 3.\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"elastic-search-7.15\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"elastic-search-7.15\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>create helmrelease that install External Secrets Operator version 1.2\n",
  "chosen": "<|from|>user\n<|recipient|>get_terraform_template\n<|content|>{\"provider\": \"github\", \"name\": \"helmrelease-external-secrets-operator\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_terraform_template\n<|content|>{\"provider\": \"github\", \"name\": \"helmrelease-external-secrets-operator\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>generate helm release to deploy redis cluster in data-store namespace with persistence disabled.\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"redis-cluster\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"redis-cluster\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>deploy helm release for installing cert manager in kube-system namespace, set acme email as admin@example.com.\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"cert-manager\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"cert-manager\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>create helmrelease that install external secrets operator version 1.2\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"external-secrets-operator\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"external-secrets-operator\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>deploy helm release for installing Cert-Manager in kube-system namespace, set acme email as admin@example.com.\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"cert-manager\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"cert-manager\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>generate helm release that install prometheus stack version 19\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"prometheus-stack\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"prometheus-stack\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>create Flux's helm release to install nginx in the default namespace, with retry -1\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"nginx\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"nginx\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>generate helmrelease that installs rook ceph in dev-a namespace. I want version 2.5.0\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"rook-ceph\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"rook-ceph\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>create HelmRelease for deploying Grafana in monitoring namespace, set resources limits CPU 500m and memory 256Mi.\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"grafana\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"grafana\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>generate helmrelease that installs Rook Ceph in dev namespace. I want version 2.5.0\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"rook-ceph\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"rook-ceph\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>generate Helm Release to install Kafka in messaging namespace, include external access.\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"kafka-release\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"kafka-release\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>create Helm Release for deploying grafana in monitoring namespace, set resources limits CPU 1.0 and memory 512Mi.\n",
  "chosen": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"grafana\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_template\n<|content|>{\"kind\": \"helmrelease\", \"name\": \"grafana\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>generate helm release to install nginx ingress in dev-team namespace.\n",
  "chosen": "<|from|> assistant\n<|recipient|>get_template\n<|content|> {\"kind\": \"helmrelease\", \"name\": \"nginx-ingress\"}<|stop|>\n",
  "rejected": "<|from|> assistant\n<|recipient|>get_template\n<|content|> {\"kind\": \"helmrelease\", \"name\": \"nginx-ingress\"}<|stop|>\n"
}
{
  "prompt": "<|from|>system\n<|recipient|>all\n<|content|>// Supported function definitions that should be called when necessary.\nnamespace functions {\n\n// This function accepts 2 params, kind and name.\ntype get_template = (_: {\n// the template kind. \n// possible kinds are gitrepo, helmrepo, bucket, ocirepository, helmrelease, kustomization.\nkind: string,\n// the template name.\nname: string\n}) => any;\n\n\ntype get_terraform_template = (_:{\n// provider kind: possible values are github, gitlab, generic, bitbucket, gitea.\nprovider: string,\n// template name, multi-words must be hyphened lower case.\nname: string\n}) => any;\n\n} // namespace functions\n\n<|from|>user\n<|recipient|>all\n<|content|>generate helm release that install Prometheus stack version 19\n",
  "chosen": "<|from|>user\n<|recipient|>get_terraform_template\n<|content|>{\"provider\": \"github\", \"name\": \"prometheus-stack\"}<|stop|>\n",
  "rejected": "<|from|>user\n<|recipient|>get_terraform_template\n<|content|>{\"provider\": \"github\", \"name\": \"prometheus-stack\"}<|stop|>\n"
}
